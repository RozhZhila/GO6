# REQUIREMENTS.md  

## üß© Project: Student Collaboration & Opportunity Platform  
**Role:** Requirements Classification Specialist  
**Deliverable:** Classified Requirements Table (Functional vs Non-Functional; User vs System)

Below is an organized, prioritized, and classified list of elicited requirements for the **Student Collaboration & Opportunity Platform**.  

Each requirement includes:  
- **ID:** Unique short identifier  
- **Description:** What the requirement is  
- **Category:** Functional / Non-Functional  
- **Type:** User Requirement (user-visible) / System Requirement (internal)  
- **Priority:** High / Medium / Low  
- **Notes:** Additional context  

---

## üìã Classified Requirements Table

| ID | Description | Category | Type | Priority | Notes |
|----|-------------|----------|------|----------|-------|
| **F-01** | Student signup and account creation using university email | Functional | User Requirement | High | Must support common edu emails and invite flow |
| **F-02** | Student verification workflow (email confirmation and optional student ID upload) | Functional | System Requirement | High | Verification status affects access level |
| **F-03** | Role-based access control: Student, Organization, Admin | Functional | System Requirement | High | Controls permissions and UI access |
| **F-04** | Student profile (name, university, major, skills, bio, projects) | Functional | User Requirement | High | Editable by student; viewable by verified users |
| **F-05** | Organization profile with limited information and restricted actions | Functional | User Requirement | High | Org accounts can post opportunities but not student-only content |
| **F-06** | Idea / Project posting (students can create posts describing idea, tags, required skills) | Functional | User Requirement | High | Posts include status (open, closed, in progress) |
| **F-07** | Browse and search functionality across categories, skills, and tags | Functional | User Requirement | High | Filtering and sorting options required |
| **F-08** | Apply / Join workflow for students to express interest in projects | Functional | User Requirement | High | Includes message to project owner and proposal form |
| **F-09** | Organization posting: internships, one-time jobs, volunteering opportunities | Functional | User Requirement | High | Must be flagged as ‚Äúorganization opportunity‚Äù |
| **F-10** | Project collaboration tools: basic task list / team assignment (MVP) | Functional | User Requirement | Medium | Integrate lightweight project management features |
| **F-11** | Private and group messaging between verified users | Functional | User Requirement | High | Accessible only to verified accounts |
| **F-12** | Notification system (in-app + optional email) | Functional | User Requirement | High | Users can opt in/out of email notifications |
| **F-13** | Reporting and moderation tools (report post/user, admin review queue) | Functional | System Requirement | High | Admin dashboard for moderation |
| **F-14** | Categories & channels for thematic grouping (tech, design, social, etc.) | Functional | User Requirement | Medium | Students can follow categories |
| **F-15** | Profile portfolio: attach project artifacts and links | Functional | User Requirement | Medium | Limit file types/size for attachments |
| **F-16** | Application settings & privacy controls | Functional | User Requirement | Medium | Default privacy = student-only visibility |
| **F-17** | Audit logging for sensitive actions (login, verification, admin) | Functional | System Requirement | High | Logs retained per data retention policy |
| **F-18** | Admin user management (suspend, delete, change roles) | Functional | System Requirement | High | All admin actions must be audited |
| **F-19** | Onboarding tutorial / help pages | Functional | User Requirement | Low | Short guided tour for first login |
| **F-20** | Export / download profile or project summary (for CVs) | Functional | User Requirement | Low | CSV or PDF export option (later phase) |
| **NF-01** | Authentication security: hashed passwords (bcrypt), secure sessions | Non-Functional | System Requirement | High | Follow OWASP recommendations |
| **NF-02** | HTTPS everywhere (TLS) | Non-Functional | System Requirement | High | Enforce HSTS and secure cookies |
| **NF-03** | Data encryption at rest (verification docs, personal info) | Non-Functional | System Requirement | High | Use AES-256 or equivalent |
| **NF-04** | Performance: page load time < 2s under expected load | Non-Functional | System Requirement | Medium | Define metrics and test thresholds |
| **NF-05** | Scalability: support from hundreds to thousands of users | Non-Functional | System Requirement | Medium | Plan DB indexing and scaling |
| **NF-06** | Availability: 99.5% uptime target | Non-Functional | System Requirement | Medium | Include monitoring and failover |
| **NF-07** | Backup & recovery: daily backups and restore process | Non-Functional | System Requirement | High | Retention policy documented |
| **NF-08** | Privacy & compliance with local data protection and university policies | Non-Functional | System Requirement | High | Include data deletion and user consent |
| **NF-09** | Usability: intuitive UI for student workflows | Non-Functional | User Requirement | High | Test with students during sprints |
| **NF-10** | Accessibility: WCAG 2.1 AA compliance | Non-Functional | System Requirement | Medium | Keyboard nav, alt-text, contrast |
| **NF-11** | Maintainability: clean code, modular architecture, documented APIs | Non-Functional | System Requirement | Medium | Use Git, code reviews, CI pipelines |
| **NF-12** | Real-time updates: notifications & chat (WebSocket or polling) | Non-Functional | System Requirement | Medium | Choose MVP-appropriate approach |
| **NF-13** | Rate limiting & abuse prevention | Non-Functional | System Requirement | High | Throttling per IP/account |
| **NF-14** | Automated unit and integration testing | Non-Functional | System Requirement | High | Define test coverage targets |
| **NF-15** | Logging & monitoring for errors and suspicious activity | Non-Functional | System Requirement | High | Centralized logs, alerts |
| **NF-16** | Internationalization / localization (future) | Non-Functional | System Requirement | Low | Design text for translation |
| **NF-17** | Mobile responsiveness and browser compatibility | Non-Functional | User Requirement | High | Responsive CSS, mobile-first |
| **NF-18** | Data retention & deletion policy | Non-Functional | System Requirement | High | Comply with privacy rules |

---

## üß† Notes on Classification
- **Functional Requirements** describe user-visible behaviors (posting, applying, messaging, moderation).  
- **Non-Functional Requirements** describe qualities and constraints (security, performance, scalability, privacy).  
- **User Requirements** express what users interact with or expect.  
- **System Requirements** cover internal operations the system must meet.

---

## üéØ Prioritization Rationale
- **High Priority:** Core features ‚Äî verification, access control, posting, messaging, security, moderation.  
- **Medium Priority:** Experience and performance ‚Äî collaboration tools, notifications, scalability.  
- **Low Priority:** Future or optional features ‚Äî exports, localization, extended project tools.

---

## ‚öôÔ∏è How to Use This Document
1. Copy this file directly into your repo as `REQUIREMENTS.md`.  
2. Use the **ID tags** (F- / NF-) to link requirements to backlog items or user stories.  
3. During sprint planning, focus on **High Priority** items for the MVP.  
4. Update notes and priorities as development progresses.

---

**Prepared by:** *Ara Omed ‚Äî Requirements Classification Specialist*
